webservice: {
  port: 8000
  interface: "0.0.0.0"
  instance.name: "reference"
}

akka: {
  loggers: ["akka.event.slf4j.Slf4jLogger"]
  actor: {
    default-dispatcher: {
      fork-join-executor: {
        // Number of threads = min(parallelism-factor * cpus, parallelism-max)
        // Uncomment to tune these values
        //parallelism-factor: 3.0
        //parallelism-max: 64
      }
    }
  }
  dispatchers: {
    io-dispatcher: {
      type: "Dispatcher"
      executor: "fork-join-executor"
    }
    api-dispatcher: {
      type: "Dispatcher"
      executor: "fork-join-executor"
    }
    engine-dispatcher: {
      type: "Dispatcher"
      executor: "fork-join-executor"
    }
    backend-dispatcher: {
      type: "Dispatcher"
      executor: "fork-join-executor"
    }
  }
}

spray.can: {
  server: {
    request-timeout: "40s"
  }
  client: {
    request-timeout: "40s"
    connecting-timeout: "40s"
  }
}

system: {
  abort-jobs-on-terminate: false
  max-retries: 10
  workflow-restart: true
  max-concurrent-workflows: 5000
  max-workflow-launch-count: 50
  new-workflow-poll-rate: 20
  number-of-workflow-log-copy-workers: 10
}

workflow-options: {
  encrypted-fields: []
  base64-encryption-key: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="
  workflow-log-dir: "cromwell-workflow-logs"
  workflow-log-temporary: true
  //workflow-failure-mode: "ContinueWhilePossible"
}

call-caching: {
  enabled: false
}

engine: {
  // Optional configurations for different filesystems
  //filesystems: {
  //  gcs: {
  //    auth: "application-default"
  //  }
  //}
}

backend: {
  default: "LSF"
  providers: {
    Local: {
      actor-factory: "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"
      config: {
        run-in-background: true
        runtime-attributes: "String? docker"
        submit: "/bin/bash ${script}"
        submit-docker: "docker run --rm -v ${cwd}:${docker_cwd} -i ${docker} /bin/bash < ${script}"
        root: "cromwell-executions"
        filesystems: {
          local: {
            localization: ["soft-link", "copy"]
          }
        }
      }
    }

    LSF: {
      actor-factory: "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"
      config: {
        runtime-attributes: """
        Int cpu = 1
        Int? memory
        String? queue
        String? project
        String? docker_image
        String? resource
        String? job_group
        """
        submit: """
        bsub \
        -J ${job_name} \
        -cwd ${cwd} \
        -o ${out} \
        -e ${err} \
        ${"-a \"docker(" + docker_image + ")\""} \
        ${"-P " + project} \
        ${"-q " + queue} \
        ${"-M " + memory} \
        ${"-n " + cpu} \
        ${"-R \"" + resource + "\""} \
        ${"-g \"" + job_group + "\""} \
        /bin/bash ${script}
        """
        kill: "bkill ${job_id}"
        check-alive: "bjobs -noheader -o \"stat\" ${job_id} | /bin/grep 'PEND\\|RUN'"
        job-id-regex: "Job <(\\d+)>.*"
      }
    }
  }
}

services: {
  KeyValue: {
    class: "cromwell.services.keyvalue.impl.SqlKeyValueServiceActor"
  }

  MetadataService: {
    class: "cromwell.services.metadata.impl.MetadataServiceActor"
  }
}
