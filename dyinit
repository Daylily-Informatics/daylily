#!/bin/bash

# Ensure the script is sourced, not executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  echo "Error: This script must be sourced, not executed directly."
  echo "Usage: source $0 --project <project> --region <region> [--skip-project-check]"
  return 3
fi

# Function to display usage and return
usage() {
  echo "This script initializes the Day CLI."
  echo "Usage: source $0 --project <project> --region <region> [--skip-project-check]"
  echo " ... project == AWS budget"
  echo "Valid projects: $(grep "^${USER}=" /opt/slurm/etc/projects_list.conf | cut -d'=' -f2)"
  echo "Valid regions: Use a valid AWS region (e.g., us-east-1, us-west-2)."
  return 3
}

# Check if a command exists
command_exists() {
  command -v "$1" &> /dev/null
}

# Ensure AWS CLI is installed
if ! command_exists aws; then
  echo "Error: AWS CLI is not installed. Please install it first."
  return 3
fi

# Parse input arguments
SKIP_PROJECT_CHECK=false
while [[ "$#" -gt 0 ]]; do
  case "$1" in
    --project) PROJECT="$2"; shift 2;;
    --region) REGION="$2"; shift 2;;
    --skip-project-check) SKIP_PROJECT_CHECK=true; shift 1;;
    *) echo "Unknown parameter passed: $1"; usage; return 3;;
  esac
done

# Use environment variables if flags are not set
PROJECT="${PROJECT:-$DAY_PROJECT}"
export DAY_PROJECT=$PROJECT

REGION="${REGION:-$DAY_AWS_REGION}"
export DAY_AWS_REGION=$REGION

# Validate region input
validate_region() {
  if [[ "$1" == "us-west-2" ]]; then
    echo "Region '$1' confirmed as valid."
    return 0
  else
    echo "Warning: Region '$1' is not 'us-west-2'."
    echo "It is recommended to use 'us-west-2' for this operation."
    return 0
  fi
}

# Call the region validation function
validate_region "$REGION" || return 3

AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)

# Skip project check and budget validation if the flag is set
if [[ "$SKIP_PROJECT_CHECK" == false ]]; then
  # Ensure the project is valid for the current user
  USER_PROJECTS=$(grep "^${USER}=" /opt/slurm/etc/projects_list.conf | cut -d'=' -f2 | tr -d ' ')
  if [[ ! ",${USER_PROJECTS}," =~ ",${PROJECT}," ]]; then
    echo "Error: Project '$PROJECT' is not valid for user '$USER'."
    echo "Valid projects for $USER: $USER_PROJECTS"
    return 3
  fi

  # Query AWS budgets
  BUDGETS=$(aws budgets describe-budgets --account-id $AWS_ACCOUNT_ID --region "$REGION" 2>/dev/null)

  if [[ -z "$BUDGETS" ]]; then
    echo "Error: Unable to retrieve any budgets from AWS. Please check your AWS permissions or configuration."
    return 3
  fi

  # Check if the specified project budget exists
  MATCHING_BUDGET=$(echo "$BUDGETS" | jq -r ".Budgets[] | select(.BudgetName==\"$PROJECT\")")

  if [[ -z "$MATCHING_BUDGET" ]]; then
    echo "No matching AWS budget found for project '$PROJECT' in region '$REGION'."
    echo "Available AWS Budgets (which may be specified with the --project flag):"
    echo "$BUDGETS" | jq -r '.Budgets[].BudgetName'

    # Skip budget creation prompt if the flag is set
    if [[ "$SKIP_PROJECT_CHECK" == false ]]; then
      read -p "Would you like to create a new budget? (y/n): " RESPONSE
      if [[ "$RESPONSE" =~ ^[Yy]$ ]]; then
        create_budget || return 3
      else
        echo "Exiting without creating a budget."
        return 3
      fi
    else
      echo "Skipping budget creation as --skip-project-check was passed."
    fi
  fi

# Function to create a new AWS budget
create_budget() {
  read -p "Enter the new budget name: " BUDGET_NAME
  if [[ ! "$BUDGET_NAME" =~ ^[a-zA-Z0-9_-]+$ ]]; then
    echo "Error: Budget name must only contain letters, numbers, hyphens, and underscores."
    return 3
  fi

  read -p "Enter the total budget amount in USD: " BUDGET_TOTAL
  if ! [[ "$BUDGET_TOTAL" =~ ^[0-9]+(\.[0-9]{2})?$ ]]; then
    echo "Error: Invalid budget total. Enter a valid number (e.g., 500.00)."
    return 3
  fi

  read -p "Enter the email address for budget notifications: " BUDGET_EMAIL
  if ! [[ "$BUDGET_EMAIL" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
    echo "Error: Invalid email address format."
    return 3
  fi

  # Create the budget using AWS CLI with a notification and subscriber
  aws budgets create-budget \
    --account-id $AWS_ACCOUNT_ID \
    --region "$REGION" \
    --budget "{
      \"BudgetName\": \"$BUDGET_NAME\",
      \"BudgetLimit\": {\"Amount\": \"$BUDGET_TOTAL\", \"Unit\": \"USD\"},
      \"TimeUnit\": \"ANNUALLY\",
      \"BudgetType\": \"COST\"
    }" \
    --notifications-with-subscribers "[
      {
        \"Notification\": {
          \"NotificationType\": \"ACTUAL\",
          \"ComparisonOperator\": \"GREATER_THAN\",
          \"Threshold\": 100,
          \"ThresholdType\": \"PERCENTAGE\"
        },
        \"Subscribers\": [
          {
            \"SubscriptionType\": \"EMAIL\",
            \"Address\": \"$BUDGET_EMAIL\"
          }
        ]
      }
    ]" &> /dev/null

  if [[ $? -eq 0 ]]; then
    echo "Success: Budget '$BUDGET_NAME' created with a total of $BUDGET_TOTAL USD and notifications sent to $BUDGET_EMAIL."
    return 0
  else
    echo "Error: Failed to create budget. Check your AWS permissions and try again, or create via the AWS console (monthly spend budget)."
    return 3
  fi
}

# Query AWS budgets
BUDGETS=$(aws budgets describe-budgets --account-id $AWS_ACCOUNT_ID --region "$REGION" 2>/dev/null)

if [[ -z "$BUDGETS" ]]; then
  echo "Error: Unable to retrieve any budgets from AWS. Please check your AWS permissions or configuration."
  return 3
fi

# Check if the specified project budget exists
MATCHING_BUDGET=$(echo "$BUDGETS" | jq -r ".Budgets[] | select(.BudgetName==\"$PROJECT\")")

if [[ -z "$MATCHING_BUDGET" ]]; then
  echo "No matching AWS budget found for project '$PROJECT' in region '$REGION'."
  echo "Available AWS Budgets (which may be specified with the --project flag):"
  echo "$BUDGETS" | jq -r '.Budgets[].BudgetName'

  read -p "Would you like to create a new budget? (y/n): " RESPONSE
  if [[ "$RESPONSE" =~ ^[Yy]$ ]]; then
    create_budget || return 3
  else
    echo "Exiting without creating a budget."
    return 3
  fi
fi

# Extract budget details for the matching budget
TOTAL=$(echo "$MATCHING_BUDGET" | jq -r ".BudgetLimit.Amount")
USED=$(echo "$MATCHING_BUDGET" | jq -r ".CalculatedSpend.ActualSpend.Amount")

if [[ -z "$TOTAL" || -z "$USED" ]]; then
  echo "Error: Unable to retrieve budget details for project '$PROJECT'."
  return 3
fi

# Calculate usage percentage
PERCENT_USED=$(awk "BEGIN {print ($USED / $TOTAL) * 100}")

# Display budget information
echo ""
echo "________________________________________________________"
echo "AWS Budget for project '$PROJECT' in region '$REGION':"
echo "  Total: $TOTAL USD"
echo "  Used: $USED USD"
echo "  Percent Used: $PERCENT_USED%"
echo "________________________________________________________"
sleep 1.3

# Check if the budget is exhausted
if (( $(echo "$PERCENT_USED >= 100" | bc -l) )); then
  echo "Warning: Budget for project '$PROJECT' is exhausted!"
fi

## export DAY_PROJECT="daylily-dev"
export APPTAINER_HOME=/fsx/environments;

# needed by daycli
export DAY_BIOME=AWSPC 

export DAY_ROOT=$PWD

export SENTIEON_TMPDIR='/fsx/scratch'
export SENTIEON_LICENSE='/fsx/SAVEME_ANA/etc/Daylily_Informatics_eval.lic'
export SENTIEON_INSTALL_DIR='/fsx/SAVEME_ANA/bin/sentieon-genomics-202112.06/'
export PATH="$PATH:$SENTIEON_INSTALL_DIR/bin/"

# Needed by daycli
if [[ "$ORIG_PATH" == "" ]]; then
    export ORIG_PATH=$PATH
fi

if [[ ! -f "./dyinit" ]]; then
    echo "ERROR: 'dyinit' must be sourced from its directory with argument OTHER or AWSPC."
    return 31
fi

post_strip=$(echo $SHELL | perl -pe 's/bash//g;')
source config/cli/colr_themes.sh 

if [[ $ORIG_PS1 == "" ]]; then
    export ORIG_PS1="$PS1"
fi

if [[ $SHELL != *"bash"* ]]; then
    echo "Warning: This script has only been tested with bash."
    sleep 1
fi

export PATH=$PATH:$PWD/bin/:.

# The tab complete magic
source bin/tabcomp.bash

# Aliases for the daycli
# approach refactoring the CLI with caution, they have a lot of cross-links in gnarly places in snakemake.
alias day-activate="source bin/day_activate"
alias day-deactivate="source bin/day_deactivate"
alias day-build="source bin/day_build"
alias day-run="bin/day_run"
alias dy-a="source bin/day_activate"
alias dy-b="source bin/day_build"
alias dy-d="source bin/day_deactivate"
alias dy-r="bin/day_run"


if [[ "$1" == "-h" || "$1" == "--help" || "$1" == "help" ]]; then
    hlp=$(cat docs/markdown/cli_help_brief.md )
    which colr > /dev/null 2>&1
    if [[ "$?" == "0" ]]; then
        colr """$hlp""" "floralwhite" "midnightblue" "b"
    else
	echo $hlp
    fi;
    return 0
fi

echo "Day CLI initialized for project '$PROJECT' in region '$REGION'."
echo -e "The Daylily CLI is now available. \n"
echo -e "The following commands are available:\n\t**TAB COMPLETION(single and double tabbing) IS ENABLED FOR ALL CLI COMMANDS AND ARGUMENTS**\n"

echo -e "\t(day-help / dy-h)         - Display this help message."
echo -e "\t(day-activate / dy-a) (slurm | local) - Activate a Slurm or local environment."
echo -e "\t(day-run / dy-r)           - Run a command in the current environment."
echo -e "\t(day-deactivate / dy-d)    - Deactivate the current environment."
echo -e "\t                             Use 'dy-d reset' to hard reset the environment (may kill your terminal!)."
echo -e "\t(day-build / dy-b)         - Build a new environment. **Only needs to be run once per head node user.**"


return 0
