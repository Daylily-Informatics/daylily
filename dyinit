#!/bin/bash

# Ensure the script is sourced, not executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  echo "Error: This script must be sourced, not executed directly."
  echo "Usage: source $0 --project <project> --region <region>"
  return 1
fi

# Function to display usage and return
usage() {
  echo "This script initializes the day CLI."
  echo "Usage: source $0 --project <project> --region <region>"
  echo " ... project == AWS budget"
  echo "Valid projects: $(grep "^${USER}=" /opt/slurm/etc/projects_list.conf | cut -d'=' -f2)"
  echo "Valid regions: Use a valid AWS region (e.g., us-east-1, us-west-2)."
  return 1
}

# Check if a command exists
command_exists() {
  command -v "$1" &> /dev/null
}

# Ensure AWS CLI is installed
if ! command_exists aws; then
  echo "Error: AWS CLI is not installed. Please install it first."
  return 1
fi

# Parse input arguments
while [[ "$#" -gt 0 ]]; do
  case "$1" in
    --project) PROJECT="$2"; shift 2;;
    --region) REGION="$2"; shift 2;;
    *) echo "Unknown parameter passed: $1"; usage; return 1;;
  esac
done

# Use environment variables if flags are not set
PROJECT="${PROJECT:-$DAY_PROJECT}"
export DAY_PROJECT=$PROJECT

REGION="${REGION:-$DAY_AWS_REGION}"
export DAY_AWS_REGION=$REGION

# Validate project and region
if [[ -z "$PROJECT" ]]; then
  echo "Error: --project is required or set DAY_PROJECT environment variable."
  usage
  return 1
fi

if [[ -z "$REGION" ]]; then
  echo "Error: --region is required or set DAY_AWS_REGION environment variable."
  usage
  return 1
fi

# Ensure the project is valid for the current user
USER_PROJECTS=$(grep "^${USER}=" /opt/slurm/etc/projects_list.conf | cut -d'=' -f2 | tr -d ' ')
if [[ ! ",${USER_PROJECTS}," =~ ",${PROJECT}," ]]; then
  echo "Error: Project '$PROJECT' is not valid for user '$USER'."
  echo "Valid projects for $USER: $USER_PROJECTS"
  return 1
fi

# Function to create a new AWS budget
create_budget() {
  read -p "Enter the new budget name: " BUDGET_NAME
  if [[ ! "$BUDGET_NAME" =~ ^[a-zA-Z0-9_-]+$ ]]; then
    echo "Error: Budget name must only contain letters, numbers, hyphens, and underscores."
    return 1
  fi

  read -p "Enter the total budget amount in USD: " BUDGET_TOTAL
  if ! [[ "$BUDGET_TOTAL" =~ ^[0-9]+(\.[0-9]{2})?$ ]]; then
    echo "Error: Invalid budget total. Enter a valid number (e.g., 500.00)."
    return 1
  fi

  # Create the budget using AWS CLI
  aws budgets create-budget \
    --account-id $(aws sts get-caller-identity --query "Account" --output text) \
    --region "$REGION" \
    --budget "{
      \"BudgetName\": \"$BUDGET_NAME\",
      \"BudgetLimit\": {\"Amount\": \"$BUDGET_TOTAL\", \"Unit\": \"USD\"},
      \"TimeUnit\": \"ANNUALLY\",
      \"BudgetType\": \"COST\"
    }" &> /dev/null

  if [[ $? -eq 0 ]]; then
    echo "Success: Budget '$BUDGET_NAME' created with a total of $BUDGET_TOTAL USD."
    return 0
  else
    echo "Error: Failed to create budget. Check your AWS permissions and try again."
    return 1
  fi
}

# Query AWS budget
BUDGET=$(aws budgets describe-budgets --account-id <YOUR_ACCOUNT_ID> --region "$REGION" 2>/dev/null)

if [[ -z "$BUDGET" ]]; then
  echo "No AWS budget found for project '$PROJECT' in region '$REGION'."
  read -p "Would you like to create a new budget? (y/n): " RESPONSE
  if [[ "$RESPONSE" =~ ^[Yy]$ ]]; then
    create_budget || return 1
  else
    echo "Exiting without creating a budget."
    return 1
  fi
fi

# Extract budget details
TOTAL=$(echo "$BUDGET" | jq -r ".Budgets[] | select(.BudgetName==\"$PROJECT\") | .BudgetLimit.Amount")
USED=$(echo "$BUDGET" | jq -r ".Budgets[] | select(.BudgetName==\"$PROJECT\") | .CalculatedSpend.ActualSpend.Amount")

if [[ -z "$TOTAL" || -z "$USED" ]]; then
  echo "Error: Unable to retrieve budget information for project '$PROJECT'."
  return 1
fi

# Calculate usage percentage
PERCENT_USED=$(awk "BEGIN {print ($USED / $TOTAL) * 100}")

# Display budget information
echo "AWS Budget for project '$PROJECT' in region '$REGION':"
echo "  Total: $TOTAL"
echo "  Used: $USED"
echo "  Percent Used: $PERCENT_USED%"

# Check if budget is exhausted
if (( $(echo "$PERCENT_USED >= 100" | bc -l) )); then
  echo "Warning: Budget for project '$PROJECT' is exhausted!"
fi

return 0


## export DAY_PROJECT="daylily-dev"
export APPTAINER_HOME=/fsx/environments;

export DAY_BIOME=AWSPC  # NO LONGER USED?

export DAY_ROOT=$PWD

export SENTIEON_TMPDIR='/fsx/scratch'
export SENTIEON_LICENSE='/fsx/SAVEME_ANA/etc/Daylily_Informatics_eval.lic'
export SENTIEON_INSTALL_DIR='/fsx/SAVEME_ANA/bin/sentieon-genomics-202112.06/'
export PATH="$PATH:$SENTIEON_INSTALL_DIR/bin/"

if [[ "$ORIG_PATH" == "" ]]; then
    export ORIG_PATH=$PATH
fi


ls ./dyinit > /dev/null 2>&1
if [[ "$?" != "0" ]]; then
    echo "ERROR:: you must source dyinit from the same directory it resides in with the argument OTHER or AWSPC"
    return 11
fi

post_strip=$(echo $SHELL | perl -pe 's/bash//g;')
source config/cli/colr_themes.sh 

if [[ $ORIG_PS1 == "" ]]; then
    export ORIG_PS1="$PS1"
fi

if [[ $SHELL == "$post_strip" ]]; then
    echo "   ---------------=== warning ===--------------- "
    echo "day has only been tested running in bash. "
    echo "...It's not likely to run in other shells- except possibly "
    echo " zsh.  I'm not going to override your shell (which would "
    echo " be a little rude), but am suggesting you jump into a bash "
    echo " shell and rerun this init script.  It looks like the current "
    echo " shell is $SHELL. "
    sleep 4

fi

export PATH=$PATH:$PWD/bin/:.

source bin/tabcomp.bash

alias day-activate="source bin/day_activate"
alias day-deactivate="source bin/day_deactivate"
alias day-build="source bin/day_build"
alias day-run="bin/day_run"
alias dy-a="source bin/day_activate"
alias dy-b="source bin/day_build"
alias dy-d="source bin/day_deactivate"
alias dy-r="bin/day_run"


if [[ "$1" == "-h" || "$1" == "--help" || "$1" == "help" ]]; then
    hlp=$(cat docs/markdown/cli_help_brief.md )
    which colr > /dev/null 2>&1
    if [[ "$?" == "0" ]]; then
        colr """$hlp""" "floralwhite" "midnightblue" "b"
    else
	echo $hlp
    fi;
    return 0
fi


echo "

DAY CLI is active, next up, activate an analysis environment.  At the moment, you're probalby using local, so you'd run 'dy-a local'.  

To deactivate, run 'dy-d' or 'dy-d reset' if you're feeling hardcore, or if dy-d seemed to not do anything useful.

run dyinit -h  or  dy-h for quick help

"



return 0
