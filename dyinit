# Ensure the script is sourced                                                                                                                          
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    echo "Error: This script must be sourced, not executed directly. Use 'source $0' to run."
    return 3
fi


. "/etc/parallelcluster/cfnconfig"
region=$cfn_region

# Ensure the script is sourced, not executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  echo "Error: This script must be sourced, not executed directly."
  echo "Usage: source $0 --project <project> [--skip-project-check]"
  return 3
fi


# Check if $cfn_region is unset or null
if [[ -z "$region" ]]; then
  echo "Error: cfn_region is not set or is empty."
  return 3
fi

# Function to display usage and return
usage() {
  echo "This script initializes the Day CLI."
  echo "Region is autodetected as $region"
  echo "Usage: $0 [--project <project_name>] [--skip-project-check]"
  echo " ... if --project is not specified, the defauly budget for the region is used: daylily-omics-analysis-${region}."
  echo "Valid projects: $(grep "^${USER}=" /opt/slurm/etc/projects_list.conf | cut -d'=' -f2)"
  echo "Valid regions: Use a valid AWS region (e.g., us-east-1, us-west-2)."
  return 3
}



# Check if a command exists
command_exists() {
  command -v "$1" &> /dev/null
}

# Ensure AWS CLI is installed
if ! command_exists aws; then
  echo "Error: AWS CLI is not installed. Please install it first."
  return 3
fi

# Parse input arguments

# Parse input arguments
SKIP_PROJECT_CHECK=false
while [[ "$#" -gt 0 ]]; do
  case "$1" in
    --project) PROJECT="$2"; shift 2;;
    --skip-project-check) SKIP_PROJECT_CHECK=true; shift 1;;
    *) echo "Unknown parameter passed: $1"; usage;;
  esac
done

# Set default project name if not provided
if [[ -z "$PROJECT" ]]; then
    if [[ -z "$region" ]]; then
        echo "Error: Region is not set. Please set the 'region' variable."
        return 3
    fi
    PROJECT="daylily-omics-analysis-${region}"
    echo "Notice: --project not set. Using default project name: $PROJECT"
fi

# Example output to confirm the parsed values
echo "Project: $PROJECT"
echo "Skip Project Check: $SKIP_PROJECT_CHECK"

# Use environment variables if flags are not set

export DAY_PROJECT=$PROJECT

export DAY_AWS_REGION=$region

# Validate region input
validate_region() {
  if [[ "$1" == "us-west-2" ]]; then
    echo "Region '$1' confirmed as valid."
    return 0
  else
    echo "Warning: Region '$1' is not 'us-west-2'."
    echo "It is recommended to use 'us-west-2' for this operation."
    return 0
  fi
}

# Call the region validation function
validate_region "$region" || return 3

AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)

# Skip project check if the flag is provided
if [[ "$SKIP_PROJECT_CHECK" == false ]]; then
  # Ensure the project is valid for the current user
  USER_PROJECTS=$(grep "^${USER}=" /opt/slurm/etc/projects_list.conf | cut -d'=' -f2 | tr -d ' ')
  if [[ ! ",${USER_PROJECTS}," =~ ",${PROJECT}," ]]; then
    echo "Error: Project '$PROJECT' is not valid for user '$USER'."
    echo "Valid projects for $USER: $USER_PROJECTS"
    return 3
  fi
else
  echo "Skipping project validation as --skip-project-check was passed."
fi

# Function to create a new AWS budget
create_budget() {

  echo "To create budget, please exit and run the following command:"
  echo "bash bin/create_budget.sh --amount <AMOUNT> --project <budgetAWSname> --region <REGION>"   
  echo "...you will then need to add the new project name to /opt/slurm/etc/projects_list.conf"
  return 3
}

# Query AWS budgets
BUDGETS=$(aws budgets describe-budgets --account-id $AWS_ACCOUNT_ID --region "$region" 2>/dev/null)

if [[ -z "$BUDGETS" && "$SKIP_PROJECT_CHECK" != "true" ]]; then
  echo "Error: Unable to retrieve any budgets from AWS. Please check your AWS permissions or configuration."
  return 3
fi

# Check if the specified project budget exists
MATCHING_BUDGET=$(echo "$BUDGETS" | jq -r ".Budgets[] | select(.BudgetName==\"$PROJECT\")")

if [[ -z "$MATCHING_BUDGET" && "$SKIP_PROJECT_CHECK" != "true" ]]; then
  echo "No matching AWS budget found for project '$PROJECT' in region '$region'."
  echo "Available AWS Budgets (which may be specified with the --project flag):"
  echo "$BUDGETS" | jq -r '.Budgets[].BudgetName'

  read -p "Would you like to create a new budget? (y/n): " RESPONSE
  if [[ "$RESPONSE" =~ ^[Yy]$ ]]; then
    create_budget || return 3
  else
    echo "Exiting without creating a budget."
    return 3
  fi
fi

# Extract budget details for the matching budget
TOTAL=$(echo "$MATCHING_BUDGET" | jq -r ".BudgetLimit.Amount")
USED=$(echo "$MATCHING_BUDGET" | jq -r ".CalculatedSpend.ActualSpend.Amount")

if [[ (-z "$TOTAL" || -z "$USED") && "$SKIP_PROJECT_CHECK" != "true" ]]; then
  echo "Error: Unable to calculate budget details for project '$PROJECT'.  $SKIP_PROJECT_CHECK"
  return 3
fi

# Calculate usage percentage
PERCENT_USED=$(awk "BEGIN {print ($USED / $TOTAL) * 100}")

# Display budget information
echo ""
echo "________________________________________________________"
echo "AWS Budget for project '$PROJECT' in region '$region':"
echo "  Total: $TOTAL USD"
echo "  Used: $USED USD"
echo "  Percent Used: $PERCENT_USED%"
echo "________________________________________________________"
sleep 1.3

# Check if the budget is exhausted
if (( $(echo "$PERCENT_USED >= 100" | bc -l) )); then
  echo "Warning: Budget for project '$PROJECT' is exhausted!"
fi

## export DAY_PROJECT="daylily-dev"
export APPTAINER_HOME=/fsx/resources/environments/containers/$USER/$(hostname)/

# needed by daycli
export DAY_BIOME=AWSPC 

export DAY_ROOT=$PWD

export SENTIEON_TMPDIR='/fsx/scratch'
export SENTIEON_LICENSE='/fsx/SAVEME_ANA/etc/Daylily_Informatics_eval.lic'
export SENTIEON_INSTALL_DIR='/fsx/SAVEME_ANA/bin/sentieon-genomics-202112.06/'
export PATH="$PATH:$SENTIEON_INSTALL_DIR/bin/"

# Needed by daycli
if [[ "$ORIG_PATH" == "" ]]; then
    export ORIG_PATH=$PATH
fi

if [[ ! -f "./dyinit" ]]; then
    echo "ERROR: 'dyinit' must be sourced from its directory with argument OTHER or AWSPC."
    return 31
fi

post_strip=$(echo $SHELL | perl -pe 's/bash//g;')
source config/cli/colr_themes.sh 

if [[ $ORIG_PS1 == "" ]]; then
    export ORIG_PS1="$PS1"
fi

if [[ $SHELL != *"bash"* ]]; then
    echo "Warning: This script has only been tested with bash."
    sleep 1
fi

export PATH=$PATH:$PWD/bin/:.

# The tab complete magic
source bin/tabcomp.bash

# Aliases for the daycli
# approach refactoring the CLI with caution, they have a lot of cross-links in gnarly places in snakemake.
alias day-activate="source bin/day_activate"
alias day-deactivate="source bin/day_deactivate"
alias day-build="source bin/day_build"
alias day-run="bin/day_run"
alias dy-a="source bin/day_activate"
alias dy-b="source bin/day_build"
alias dy-d="source bin/day_deactivate"
alias dy-r="bin/day_run"


if [[ "$1" == "-h" || "$1" == "--help" || "$1" == "help" ]]; then
    hlp=$(cat docs/markdown/cli_help_brief.md )
    which colr > /dev/null 2>&1
    if [[ "$?" == "0" ]]; then
        colr """$hlp""" "floralwhite" "midnightblue" "b"
    else
	echo $hlp
    fi;
    return 0
fi

sq_cmd='squeue -o "%i %P %C %t %N %c %T %m %M %D %p"'
sq() {
  if [ $# -eq 0 ]; then
    eval $sq_cmd
  else
    eval $sq_cmd -j "$(echo "$@" | tr ' ' ',')"
  fi
}

echo "squeue helper alias 'sq' activated"


echo "Day CLI initialized for project '$PROJECT' in region '$region'."
echo -e "The Daylily CLI is now available. \n"
echo -e "The following commands are available:\n\t**TAB COMPLETION(single and double tabbing) IS ENABLED FOR ALL CLI COMMANDS AND ARGUMENTS**\n"

echo -e "\t(day-help / dy-h)         - Display this help message."
echo -e "\t(day-activate / dy-a) (slurm | local) - Activate a Slurm or local environment."
echo -e "\t(day-run / dy-r)           - Run a command in the current environment."
echo -e "\t(day-deactivate / dy-d)    - Deactivate the current environment."
echo -e "\t                             Use 'dy-d reset' to hard reset the environment (may kill your terminal!)."
echo -e "\t(day-build / dy-b)         - Build a new environment. **Only needs to be run once per head node user.**"


return 0
