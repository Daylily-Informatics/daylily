#!/bin/bash

# Check if the script is running in Zsh and emulate Zsh behavior
if [ -n "$ZSH_VERSION" ]; then
    emulate -L zsh  # Ensure Zsh behaves like Zsh (if required)

    # Check if the script is sourced or executed
    if [ -n "$ZSH_EVAL_CONTEXT" ] && [[ "$ZSH_EVAL_CONTEXT" =~ :file$ ]]; then
        echo "This script is sourced."
    else
        echo "Error: This script must be sourced, not executed directly. Use 'source $0' to run."
        exit 3
    fi
fi

# Activate or create the Daylily CLI conda environment
if conda env list | grep  "DAYCLI"; then
    echo "Conda environment 'DAYCLI' already exists."
    conda activate DAYCLI
else
    echo "'DAYCLI' environment not found. Please run 'init_daycli' to create the environment."
    reuturn 3
fi

if [ -z "$AWS_PROFILE" ]; then
    echo "Error: AWS_PROFILE is not set."
    return 1  # Exit the function with an error status
fi

# Ensure the script is sourced, not executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    echo "This script must be sourced, not executed directly. Use 'source THISSCRIPT' to run."
    exit 1
fi

# Set AWS region (edit if needed)
region="us-west-2"

echo aaaaaa
# Function to list PEM files and prompt user to select one
select_pem_file() {
    echo "Listing available PEM files in ~/.ssh:"

    # Initialize an empty array
    pem_files=()

    # Populate the array using a loop over the output of ls
    while IFS= read -r file; do
        pem_files+=("$file")
    done < <(ls -1 ~/.ssh/*.pem 2>/dev/null)

    # Check if any PEM files were found
    if [[ ${#pem_files[@]} -eq 0 ]]; then
        echo "Error: No PEM files found in ~/.ssh."
        return 1
    fi

    echo "Select a PEM file:"
    select selected_pem in "${pem_files[@]}"; do
        if [[ -n "$selected_pem" ]]; then
            echo "You selected: $selected_pem"
            export DAY_PEM="$selected_pem"
            break
        else
            echo "Invalid selection. Please try again."
        fi
    done
}

select_pem_file

# Check if DAY_PEM is set, if not prompt user to select one
if [[ -z "$DAY_PEM" ]]; then
    echo "DAY_PEM is not set. Prompting user to select a PEM file..."
    select_pem_file || return 1  # Exit if no valid selection
fi

# Function to list clusters and prompt user to select one
select_cluster_name() {
    echo "Retrieving available clusters in region $region..."

    # Initialize an empty array for cluster names
    cluster_names=()

    # Populate the array using a while loop over the command output
    while IFS= read -r line; do
        cluster_name=$(echo "$line" | perl -pe 's/.*\: \"(.*)\"\,.*/\1/g')
        cluster_names+=("$cluster_name")
    done < <(pcluster list-clusters --region "$region" | grep 'clusterName')

    # Check if any clusters were found
    if [[ ${#cluster_names[@]} -eq 0 ]]; then
        echo "Error: No clusters found in region $region."
        return 1
    fi

    echo "Select a cluster:"
    select selected_cluster in "${cluster_names[@]}"; do
        if [[ -n "$selected_cluster" ]]; then
            echo "You selected: $selected_cluster"
            export DAY_CLUSTER_NAME="$selected_cluster"
            break
        else
            echo "Invalid selection. Please try again."
        fi
    done
}


# Check if DAY_CLUSTER_NAME is set, if not prompt user to select one
if [[ -z "$DAY_CLUSTER_NAME" ]]; then
    echo "DAY_CLUSTER_NAME is not set. Prompting user to select a cluster..."
    select_cluster_name || return 1  # Exit if no valid selection
fi

# Retrieve the cluster's public IP address
echo "Fetching public IP address for cluster '$DAY_CLUSTER_NAME'..."
cluster_ip=$(pcluster describe-cluster --region "$region" -n "$DAY_CLUSTER_NAME" \
    | grep 'publicIpAddress' | perl -pe 's/.*\: \"(.*)\"\,.*/\1/g')

if [[ -z "$cluster_ip" ]]; then
    echo "Error: Unable to retrieve the public IP address of the cluster."
    return 1
fi

echo "Cluster IP address: $cluster_ip"

# Activate the Conda environment
echo "Activating Conda environment 'DAYCLI'..."
if ! conda activate DAYCLI; then
    echo "Error: Failed to activate Conda environment 'DAYCLI'. Ensure it's installed correctly."
    return 1
fi

# Connect to the head node via SSH using the selected PEM file
echo "Connecting to the head node at $cluster_ip using PEM: $DAY_PEM..."
ssh -i "$DAY_PEM" ubuntu@"$cluster_ip" \
    -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
