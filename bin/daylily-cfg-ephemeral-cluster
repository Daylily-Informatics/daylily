#!/bin/bash

region="us-west-2"  # Set the region as a parameter

echo "Welcome to the Daylily CLI Setup"
echo "daylily is configured to run in the $region region. You are advised to change your ~/.aws/config file to match this region."

# Check if the script is sourced
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    echo "This script should be sourced, not executed directly. Please use 'source THISSCRIPT' to run."
    return 1
fi

# Check if conda exists
if ! command -v conda &> /dev/null; then
    echo "Error: Conda is not available in this shell. EXITING." >&2
    return 1
fi

# Activate DAYCLI conda environment or create it if it doesn't exist
if conda env list | grep -q "^DAYCLI "; then
    echo "Conda environment 'DAYCLI' already exists. Activating it."
else
    echo "Creating 'DAYCLI' environment."
    conda create -y -n DAYCLI -c conda-forge python parallel nodejs==18.15.0 aws-parallelcluster==3.10.1 flask=2.2.5
fi
conda activate DAYCLI


# Check if parallel is installed
echo "Checking if GNU Parallel is installed..."
if ! parallel --version &> /dev/null; then
    echo "Error: GNU Parallel is not installed. Please install it (e.g., 'conda install -c conda-forge parallel'). Exiting."
    return 1
else
    echo "GNU Parallel found."
    # Citing parallel
    echo "Citing GNU parallel."
    parallel --citation <<< "will cite"   

    echo "We will absolutely cite gnu parallel when we publish our work."
    sleep 1
fi


# Ensure AWS CLI is installed
echo "Checking AWS CLI version..."
aws_version=$(aws --version 2>&1 | cut -d ' ' -f 1 | sed 's/aws\-cli\///g')
if [[ "$aws_version" != "1.27.92" ]]; then
    echo "Warning: Expected AWS CLI version 1.27.92, but found version $aws_version."
fi

# Ensure pcluster is installed
echo "Checking pcluster version..."
pcluster_version=$(pcluster version | grep 'version' | cut -d '"' -f 4)
if [[ "$pcluster_version" != "3.5.0" ]]; then
    echo "Warning: Expected pcluster version 3.5.0, but found version $pcluster_version."
fi

# Prompt user for inputs
echo "Please enter the following required details:"


# Present available PEM files for user selection
pem_files=($(find ~/.ssh -type f -name "*.pem"))

if [[ ${#pem_files[@]} -eq 0 ]]; then
    echo "No PEM files found in ~/.ssh. Please ensure you have your PEM file there."
    return 1
fi

echo "\nSelect a PEM file to use:"
select pem_file in "${pem_files[@]}"; do
    if [[ -n "$pem_file" ]]; then
        echo "You selected: $pem_file"
        break
    else
        echo "Invalid selection, please try again."
    fi
done


# Query available S3 buckets that match "omics-analysis"
matching_buckets=($(aws s3api list-buckets --query "Buckets[?contains(Name, 'omics-analysis')].Name" --output text --region $region))

if [[ ${#matching_buckets[@]} -eq 0 ]]; then
    echo "No S3 buckets matching 'omics-analysis' found. Please choose option 0 below."
    sleep 1

else
    bucket_url=na
    echo "\nSelect a matching S3 bucket or choose '0' to manually enter an S3 bucket:"
    options=("Manually enter an S3 bucket" "${matching_buckets[@]}")
    select bucket_choice in "Manually Enter s3 string" "${matching_buckets[@]}"; do
        if [[ "$REPLY" == "0" ]]; then
            echo -n "\nEnter the S3 bucket URL for references and init scripts (e.g., s3://BUCKET-NAME): "
            read bucket_url
            bucket_name=$(echo "$bucket_url" | sed 's/s3\:\/\///g' | sed 's/\/$//')

        elif [[ -n "$bucket_choice" ]]; then
            bucket_url="s3://$bucket_choice"
            bucket_name=$bucket_choice

        else
            echo "Invalid selection, please try again."
        fi
        echo "You selected: $bucket_url"
        break
    done
fi


echo "\n\n\tPUBLIC & PRIVATE subnets, as well as BUDGET POLICY ARN will be discovered automatically & should have been created by running the stackformation script previously. If nothing is presented, please run the stackformation and confirm the resources are being created.\n\n"
sleep 2


# Display public subnets with names and IDs for selection
echo "\nSelect a Public Subnet:"
public_subnets=$(aws ec2 describe-subnets \
  --query "Subnets[*].[SubnetId, Tags[?Key=='Name'].Value | [0]]" --region $region \
  --output text | grep "Public Subnet")

if [[ -z "$public_subnets" ]]; then
    echo "Error: No public subnets found. Exiting."
    return 1
fi
public_subnet_choices=()
while read -r subnet_id subnet_name; do
    public_subnet_choices+=("$subnet_name ($subnet_id)")
done <<< "$public_subnets"

select public_subnet_choice in "${public_subnet_choices[@]}"; do
    if [[ -n "$public_subnet_choice" ]]; then
        public_subnet=$(echo "$public_subnet_choice" | sed -n 's/.*(\(.*\)).*/\1/p')
        echo "You selected Public Subnet: $public_subnet"
        break
    else
        echo "Invalid selection, please try again."
    fi
done



# Select a Private Subnet:
private_subnets=$(aws ec2 describe-subnets \
  --query "Subnets[*].[SubnetId, Tags[?Key=='Name'].Value | [0]]" --region $region \
  --output text | grep "Private Subnet")
echo "\nSelect a Private Subnet:"

if [[ -z "$private_subnets" ]]; then
    echo "Error: No private subnets found. Exiting."
    return 1
fi

private_subnet_choices=()
while read -r subnet_id subnet_name; do
    private_subnet_choices+=("$subnet_name ($subnet_id)")
done <<< "$private_subnets"

select private_subnet_choice in "${private_subnet_choices[@]}"; do
    if [[ -n "$private_subnet_choice" ]]; then
        private_subnet=$(echo "$private_subnet_choice" | sed -n 's/.*(\(.*\)).*/\1/p')
        echo "You selected Private Subnet: $private_subnet"
        break
    else
        echo "Invalid selection, please try again."
    fi
done


# Query for all IAM policy ARNs that contain 'pclusterTagsAndBudget'
policy_arns=($(aws iam list-policies --region $region --query 'Policies[?PolicyName==`pclusterTagsAndBudget`].Arn' --output text))

if [[ ${#policy_arns[@]} -eq 0 ]]; then
    echo "Error: No IAM policies found with the name 'pclusterTagsAndBudget'. Exiting."
    return 1
fi

# Present the available IAM policies for user selection
echo "\nSelect an IAM policy ARN for 'pclusterTagsAndBudget':"
select arn_policy_id in "${policy_arns[@]}"; do
    if [[ -n "$arn_policy_id" ]]; then
        echo "You selected: $arn_policy_id"
        break
    else
        echo "Invalid selection, please try again."
    fi
done

# Cluster name input
echo -n "\nEnter the name for your cluster (alphanumeric and '-'): " 
read cluster_name
if [[ ! "$cluster_name" =~ ^[a-zA-Z0-9\-]+$ ]]; then
    echo "Error: Invalid cluster name. Only alphanumeric characters and hyphens are allowed."
    return 1
fi

# Daylily configuration file input
echo -n "\nEnter the path to the daylily cluster config YAML file [press Enter to use default 'config/day_cluster/prod_cluster.yaml']: "
read cluster_yaml

# Set default if no input is provided
if [[ -z "$cluster_yaml" ]]; then
    cluster_yaml="config/day_cluster/prod_cluster.yaml"
    echo "No path provided. Using default: $cluster_yaml"
fi

# Check if the YAML file exists
if [[ ! -f "$cluster_yaml" ]]; then
    echo "Error: YAML file '$cluster_yaml' does not exist. Exiting."
    return 1
fi

# Create the Daylily configuration directory and copy the config file
mkdir -p ~/.config/daylily
target_conf=~/.config/daylily/${cluster_name}_cluster.yaml
regsub_vals=~/.config/daylily/${cluster_name}_cluster_init_vals.txt

cp "$cluster_yaml" "$target_conf"

# Prepare the replacement variables
pem_name=$(basename "$pem_file" | cut -d '.' -f 1)
echo """REGSUB_REGION=$region
REGSUB_PUB_SUBNET=$public_subnet
REGSUB_KEYNAME=$pem_name
REGSUB_S3_BUCKET_INIT=$bucket_url
REGSUB_S3_BUCKET_NAME=$bucket_name
REGSUB_S3_IAM_POLICY=$arn_policy_id
REGSUB_PRIVATE_SUBNET=$private_subnet
REGSUB_S3_BUCKET_REF=$bucket_url
""" > $regsub_vals



sleep 0.25
bash  bin/other/regsub_yaml.sh $regsub_vals $target_conf;


# Run a dry run to validate the cluster creation
echo "Running a cluster creation dry run..."
pccmd="pcluster create-cluster -n $cluster_name -c $target_conf --dryrun true --region $region"
echo "running $pccmd"
return 1

echo "If the dry run was successful, proceed to create the cluster."
echo -n "\nAre you ready to create the cluster (yes | no)? " 
read ready_to_create
if [[ "$ready_to_create" != "yes" ]]; then
    echo "Exiting without creating the cluster."
    return 0
fi

# Create the cluster
echo "Creating the cluster '$cluster_name'... in region $region"
pccreate_cmd = "pcluster create-cluster -n $cluster_name -c $target_conf --region $region"

# Monitoring cluster creation
echo "Waiting for the cluster to complete creation. This may take 10-15 minutes."
echo "You can monitor the status by running: pcluster list-clusters --region $region  "

python bin/helpers/watch_cluster_status.py $region

echo "\n\n\tOnce the cluster status is COMPLETE, you can run './bin/daylily-init-headnode $pem_file' to configure the head node.\n\n"


echo " ";
echo " ";
echo "\n\tNext, configuring your head node.\n";
sleep 1;
bin/daylily-init-headnode $pem_file
