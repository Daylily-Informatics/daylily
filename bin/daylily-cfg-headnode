#!/bin/zsh

# Daylily Headnode Configuration Script

# Ensure the script is sourced, not executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    echo "This script should be sourced, not executed directly. Please use 'source THISSCRIPT' to run."
    exit 1
fi

# Capture arguments for PEM file and region
pem_file=$1
region=$2
aws_profile=$3
duser="ubuntu"

# Ensure both PEM file and region are provided
if [[ -z "$pem_file" || -z "$region" || -z "$aws_profile" ]]; then
    echo "Error: You must provide both the PEM file path and the AWS region."
    echo "Usage: source $0 /path/to/pem_file region profile"
    return 1
fi
 
AWS_PROFILE=$aws_profile

# List available clusters in the specified region
echo "Clusters detected in region $region:"
cluster_names=$(pcluster list-clusters --region $region | grep clusterName | awk '{print $2}' | cut -d '"' -f 2)

# Check if there are any clusters detected
if [[ -z "$cluster_names" ]]; then
    echo "Error: No clusters found in region $region."
    return 1
fi
# Convert detected cluster names into an array
cluster_array=()
while IFS= read -r cluster_name; do
    cluster_array+=("$cluster_name")
done <<< "$cluster_names"

# Auto-select if there is only one cluster, otherwise prompt for selection
if [[ ${#cluster_array[@]} -eq 1 ]]; then
    selected_cluster=$cluster_array
    echo "Only one cluster found: $selected_cluster. Auto-selecting it."
else
    echo "Select a cluster name:"
    select selected_cluster in "${cluster_array[@]}"; do
        if [[ -n "$selected_cluster" ]]; then
            echo "You selected: $selected_cluster"
            break
        else
            echo "Invalid selection, please try again."
        fi
    done
fi
cluster_name=$selected_cluster


# Get the public IP address of the cluster's head node
cluster_ip_address=$(pcluster describe-cluster-instances -n "$cluster_name" --region "$region" \
    | grep publicIpAddress | perl -p -e 's/[ |"|,]//g;' | cut -d ':' -f 2)

if [[ -z "$cluster_ip_address" ]]; then
    echo "Error: Could not retrieve the public IP address of the cluster."
    return 1
fi

echo "Cluster $cluster_name's public IP is $cluster_ip_address."
echo " "

# List available PEM files in the .ssh directory
echo "Detected PEM files in ~/.ssh:"
ls -1 ~/.ssh/*.pem

# If PEM file is not provided as an argument, prompt the user
if [[ -z "$pem_file" ]]; then
    echo "Enter the full absolute path to your PEM file:"
    read pem_file
fi

# Ensure the PEM file exists
if [[ ! -f "$pem_file" ]]; then
    echo "Error: PEM file '$pem_file' does not exist."
    return 1
fi

# Generate SSH key for the head node user
echo "Generating SSH key on the head node..."
ssh -i "$pem_file" ubuntu@"$cluster_ip_address"   -o StrictHostKeyChecking=no   -o UserKnownHostsFile=/dev/null \
    "ssh-keygen -q -t rsa -f ~/.ssh/id_rsa -N '' <<< $'\ny' | sudo su - $duser"

# Display the public key and instruct the user to add it to GitHub
echo "You must have a GitHub account and access to the Daylily repository."
echo "Please add the following public SSH key to GitHub:"
ssh -i "$pem_file"  -o StrictHostKeyChecking=no   -o UserKnownHostsFile=/dev/null ubuntu@"$cluster_ip_address" "cat ~/.ssh/id_rsa.pub"

echo " "
echo "(optional) save this SSH key in GitHub to your settings->ssh/gpg keys, which will allow you to push changes back to github if you make any. You can always add this key latter too, find it in you ~/.ssh/id_rsa.pub.\n\n\tSleeping for 15s then proceeding."
sleep 15


# Clone the Daylily repository to the head node
echo "Cloning Daylily repository usibng https to the head node ~/projects"
ssh -i "$pem_file" ubuntu@"$cluster_ip_address"  -o StrictHostKeyChecking=no   -o UserKnownHostsFile=/dev/null \
    "sudo su - $duser -c 'mkdir -p ~/projects && cd ~/projects &&  git clone https://github.com/Daylily-Informatics/daylily.git'"

# Initialize and configure the Daylily environment on the head node
echo "Configuring Daylily environment on the head node..."
ssh -t -i "$pem_file" ubuntu@"$cluster_ip_address" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
    "source ~/.bashrc && cd ~/projects/daylily && source dyinit --skip-project-check && source bin/day_build"

# Run a simple help test for Daylily remotely
echo "Running a simple help test on the head node..."
ssh -t -i "$pem_file" ubuntu@"$cluster_ip_address" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
    "source ~/.bashrc && cd ~/projects/daylily && source dyinit --skip-project-check && source bin/day_activate local hg38 remote && ./bin/day_run help"


# start building the minimal cached envs
echo "Building some cached analysis environments to save a little time ... this can take a little time"
ssh -t -i "$pem_file" ubuntu@"$cluster_ip_address"  -o StrictHostKeyChecking=no   -o UserKnownHostsFile=/dev/null \
    "source ~/.bashrc && cd ~/projects/daylily && source dyinit --skip-project-check && source bin/day_activate local hg38 remote && ./bin/day_run  produce_snv_concordances -p -k -j 2 --config aligners=['strobe','bwa2a'] dedupers=['dppl'] snv_callers=['oct','deep']  --conda-create-envs-only  "


# Finally, a quick test to confirm things are running as expected locally on the headnode
echo "Run a quick test to ensure things are working as expected... [local run]"
ssh -t -i "$pem_file" ubuntu@"$cluster_ip_address"  -o StrictHostKeyChecking=no   -o UserKnownHostsFile=/dev/null \
    "source ~/.bashrc && cd ~/projects/daylily && source dyinit --project daylily-global && source bin/day_activate local hg38 remote && ./bin/day_run  produce_deduplicated_bams -p -k -j 2 --config aligners=['strobe'] dedupers=['dppl']  "



# Provide final instructions for SSH access to the head node
echo "You can now SSH into the head node with the following command:"
echo "        ssh -i $pem_file ubuntu@$cluster_ip_address"
echo " "
echo "Once logged in, as the 'ubuntu' user, run the following commands:"
echo "  cd ~/projects/daylily"
echo "  source dyinit " 
echo "  dy-a local"
echo "  dy-g hg38"
echo "  dy-r help"
echo " "
echo ".... and remember to re-clone the repo for each new analysis in the /fsx/analysis_results directory for non-test uses."
echo " "
echo "Setup complete. "

echo " "
echo "___bonus round___"
echo "Would you like to remotely launch a test using the slurm executor (this will be in a tmux session you can attach to on the headnode)? [y/n]"
read REPLY
if [[ "$REPLY" == "y" ]]; then

    session_name="cluster_test_$(date +%s)"  
    ssh -t -i "$pem_file" ubuntu@"$cluster_ip_address" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
        "tmux new-session -d -s \"$session_name\" \
        \"bash -c 'source ~/.bashrc && cd ~/projects/daylily && source dyinit --project daylily-global && source bin/day_activate slurm hg38 remote && ./bin/day_run produce_snv_concordances -p -k -j 2 --config aligners=[\\\"strobe\\\",\\\"bwa2a\\\"] dedupers=[\\\"dppl\\\"] snv_callers=[\\\"deep\\\"]; bash'\"" && \
    echo "Tmux session >>> '$session_name' <<< started on the remote server."
    echo "You can monitor the session using the following command:"
    echo "ssh -i \"$pem_file\" ubuntu@\"$cluster_ip_address\" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null 'tmux attach-session -t $session_name'"
fi
echo ""
echo "And, you may now access the headnode via the PCUI, via 'source bin/daylily-ssh-into-headnode', or SSH into the head node with the following command:"
echo "        ssh -i $pem_file ubuntu@$cluster_ip_address"
echo " "
echo "fin"
