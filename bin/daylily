
conda activate DAYCLI;
# Daylily API

echo "Welcome to daylily"; 
sleep 0.4;

echo "PREREQUISITES: Versions listed are tested, more recent versions may work, but not tested...";
echo " 1:gnu parallel (install with brew install parallel, sudo yum install -y parallel, sudo apt-get install parallel, conda install -c conda-forge parallel ).";
echo " ";
echo " 2:bash shell (tested on a MAC laptop for this install script).";
echo " ";
echo "  3:awscli version XXXX ** install with pip 'pip install awscli==1.27.92' ";
echo " ";
echo " 4:pcluster version 3.5.0  ** install with pip 'pip install pcluster==3.5.0 **";
echo " ";
echo " 5:AWS key and secret access key in ~/.aws/credentials";
echo " ";
echo "   ---->> An S3 bucket with appropriate permissions (see docs) as well as the daylily reference data saved to the root /data folder (see docs, this is a tiny bit complicated.).. additonally you will need a s3 path to a cluster node init script nodes may access when being spun up (see docs).";
echo " ";
echo " ";

echo "Have you configured the AWS cli?  Enter the access and secret access key if not yet entered.";
echo "... and foir region you must specify us-west-2 !! ";
echo " ";
aws configure;

echo " ";
echo " ";
echo "aws cli installed.";

echo "is parallel installed?"
parallel --version
if [[ "$?" != "0" ]]; then
    echo "gnu Parallel must be installed";
else
    echo "... parallel found";
fi;

echo "-> Do you have the: tag arnID, public subnet, private subnet, path to PEM file, S3 bucket url which were created as described in the prereq docs? [y to proceed | n to cancel]:";
read done_s3;

echo $done_s3
if [[ "$done_s3" == "y" || "$done_s3" == "Y" || "$done_s3" == "yes" ]]; then
    sleep 0.2
else
    echo 'exiting...';
    return 1
fi;

if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    echo """!! in the us-west-2 region	(Oregon)
      !!!! These credentials are not used outside this initial creation step.  parallel cluster manages the	entire cluster using IAM roles,	etc.


    >To obtain AWS access key and secret access key, you can follow these steps:

    > Open the AWS Management Console and go to the IAM dashboard.

    > Click on \"Users\" in the left sidebar, and then click on \"Add user\".

    > Enter a name for the user (e.g. \"my-user\") and select \"Programmatic access\" as the access type. Then click \"Next\".

    > On the "Set permissions" screen, you can either add the user to an existing group with the necessary permissions, or create a new group and add the necessary permissions. Make sure to grant the user only the minimum permissions required to perform the necessary tasks.

    > On the \"Review\" screen, review the user\'s settings and click \"Create user\".

    > The access key and secret access key for the user will be displayed. Make sure to save the secret access key in a secure location, as you will not be able to access it again. You can download the access key as a CSV file or copy it to your clipboard.

    > Note that access keys provide full programmatic access to your AWS resources, so make sure to keep them secure and do not share them with unauthorized users. You can rotate access keys regularly to improve security.

    > Once you have obtained the access key and secret access key, you can use them to authenticate with AWS services, such as the AWS CLI or SDKs. You can configure the AWS CLI using the aws configure command and enter the access key and secret access key when prompted.

    """;
fi;

echo "A pem file located in ~/.ssh/PEMNAME.pem";
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    echo """!! in the us-west-2 region \(Oregon\)
      !!!! This *.pem file is not used beyond this users account on the machine you are working on now.  You only require it to login to the head node.
    > To create an AWS .pem file, you can follow these steps:

    > Open the AWS Management Console and go to the EC2 dashboard.

    > Click on 'Key Pairs' in the left sidebar, and then click on 'Create Key Pair'.

    > Enter a name for the key pair e.g. 'my-key-pair' and select 'PEM' as the file format. Then click "Create Key Pair".

    > The private key file will be downloaded to your computer, and the public key will be stored in AWS. Make sure to save the private key file in a safe place, as you will need it to access your EC2 instances.

    > Note that you can only download the private key file once, so make sure to save it in a secure location. If you lose the private key file, you will not be able to access your EC2 instances.

    > To use the .pem file to connect to an EC2 instance, you will need to specify the path to the file in your SSH command. For example, if your private key file is called 'my-key-pair.pem' and is located in your home directory, you can use the following command to connect to your EC2 instance:

    > save this pem file to ~/.ssh/PEMNAME.pem

    > run: 'chmod 400 PEMNAME.pem'
    """;
fi;

region="us-west-2"

echo "Checking aws version";
echo "A github account : https://github.com/ ";

sleep 0.4;

aver=$(aws --version | cut -d ' ' -f 1 | sed 's/aws\-cli\///g');
if [[ "$aver" == "1.27.92" ]]; then
    echo 'aws cli version 1.27.92 detected.';
else
    echo "aws version != 1.27.92 !!!, FOUND: $aver .. cconsider installing expected version if problems are encountered.";
    sleep 5;
fi;

echo "... checking pcluster version";
pcver=$(pcluster version | grep 'version' | cut -d '"' -f 4);

if [[ "$pcver" == "3.5.0" ]]; then
    echo "pcluster version $pcver detected.";
else
    echo "WARNING::: pcluster version ~= 3.5.0 !!!, FOUND: $pcver";
    echo "if this is >  3.5.0, you should be OK, but daylily is tested on 3.5.0.";
    sleep 7;
fi;
sleep 0.4;

echo "please enter the FULL ABSOLUTE path '/home/yourusername/.ssh/PEMNAME.pem' to your pem file:";

read pem_file;
echo "$?P:"$pem_file"P"
ls -lt $pem_file;
echo "$?"
if [[ "$?" != "0" ]]; then
    echo "pem file >$pem_file< does not exist, ret $?";
    return 1;
fi;
sleep 0.4;

echo "ONWARD"

echo """    *** VPC and SUBNET creation ***

    To build a cluster, you require a public >or private if you want to plumb that<
      subnet for the head node, and a private subnet for the compute nodes. Both w/in
      a VPC. >there are limits on how many subnets or VPCs can be active in an account
      ... if you have build problems, this is a place to check first.
      
      pcluster can build this all for you, to do so run:
         . pcluster configure -c ./subnet_create.yaml.
	  .. this is using pcluster to build a yaml for a toy cluster, in the background
	      it creates the vpc and subnets to use in the daylily cluster.
	  ..  enter the # for us-west-2 >can run elsewhere which have the correct instance
	       families, but untested outside us-west-2.
	  ..  choose the pem file name you wish to choose >if you do not see the one you
	       wish to use, AND which you have the actual pem file saved to ~/.ssh, cancel
	       and go create a pem file in us-west-2.
	  ...  choose 'slurm' batch will not work.
	  ...  choose 'centos7'  the other options will not work for daylily to run.
	  ...  choose the default for the head node instance type t2.micro.
	  ...  choose '1' for number of queues.
	  ...  choose 'queue1' for the queue name.
	  ...  choose '1' for the number of compute nodes.
	  ...  choose 't2.micro' for the compute node instance type.
	  ...  choose 1 for max instances.
	  ...  !! For 'Automate VPC', choose 'yes'.
	  ...  Choose any of the 3 availability zones.
	  ...  Choose 'head node public, compute fleet provate' head may be private, but
	       you'll need to take extra steps on your own to be able to access it.
	  ....  At this point, pcluster will go create the resources you need.
	        ... wait ... do not close the terminal until it has completed.  If there
		is a problem ie: the max VPCs allowd have been exceeded, it should throw
		a meaningful error.

         . Next, go to the AWS EC2 console and fetch the : VPC id, public subnet id and
	    private subnet id.  Start here:
	    https://us-west-2.console.aws.amazon.com/vpc/home?region=us-west-2#Home

         .. Click on 'VPC' to get a list of VPCs.
	     The new VPC will be named 'ParallelCLusterVPC*', this is not the ID! The
	     id will look like 'vpc-ALPHANUMERIC'.  Save this VPC ID.
	 .. Next, click on 'subnets', collect the subnet ids for the two subnets
	     created, named 'parallelcluster-public*' and 'parallelcluster-private*',
	     you'll again want to save the IDs for both for use in a moment, they
	     look like 'subnet-ALPHANUMERIC.

         . Next, you'll be asked to name your cluster, the name may only contain
	    alphanumeric character and '-'.

    """;
    
echo "please enter the name for your cluster >>alpha numeric and '-' characters only:<<";
read cluster_name;

echo "please enter the public subnet id collected previously:";
read public_subnet;


echo "please enter the private subnet id collected previously:";
read private_subnet


echo "please enter the location of the daylily cluster config yaml file."
echo "  the default template assumes your EC2 spot instance quotas for"
echo " 'All Standrd* Spot Instance Requests' is gteq 128  this is"
echo " the bare minimum, something along the lines of 512 is ideal."
echo "see: https://us-west-2.console.aws.amazon.com/servicequotas/home/services/ec2/quotas"
echo "the daylily default is found here: config/day_cluster/prod_cluster.yaml ."
read cluster_yaml

ls -lt $cluster_yaml
if [[ "$?" != "0" ]]; then
    echo "ERROR:: The yaml file specified: $cluster_yaml, does not exist.";
    return 1;
fi;


echo "enter the s3 bucket url for the init scripts >>ie s3://BUCKET-NAME<<, NO trailing /";
read bucket_url;

bucket_name=$(echo $bucket_url | sed 's/s3\:\/\///g' );

echo "making the daylily conf dir.";
mkdir -p ~/.config/daylily;

target_conf=~/.config/daylily/daylily_default_cluster.yaml;

cp $cluster_yaml $target_conf;

pem_name=$(basename $pem_file | cut -d '.' -f 1);

echo " "
echo " "

s3_ref_data_bucket=bucket_url

echo "Enter the ARN policy ID for the S3Bucket access, should look like 'arn:aws:iam::YOURACCOUNTID:policy/pclusterTagsAndBudget'."
read arn_policy_id;


echo ' regsubing yaml values needing updates';
# Create txt file of entered data
echo """REGSUB_REGION=$region
REGSUB_PUB_SUBNET=$public_subnet
REGSUB_KEYNAME=$pem_name
REGSUB_S3_BUCKET_INIT=$bucket_url
REGSUB_S3_BUCKET_NAME=$bucket_name
REGSUB_S3_IAM_POLICY=$arn_policy_id
REGSUB_PRIVATE_SUBNET=$private_subnet
REGSUB_S3_BUCKET_REF=$bucket_url
""" > ~/.config/daylily/cluster_init_values.txt


# swap in working cluster info
#cat ~/.config/daylily/cluster_init_values.txt | parallel 'k=$(echo {} | cut -d "=" -f 1) && v=$(echo {} | cut -d "=" -f 2 |  perl -p -e "s/\//\\\\\//g;" ); vv=$(echo $v | perl -p -e "s/\:/\\\\\:/g;"); perl -pi -e "s/$k/$vv/g"  ~/.config/daylily/daylily_default_cluster.yaml ;'

bash  bin/other/regsub_yaml.sh;
bash  bin/other/regsub_yaml.sh;

echo "TESTING The $target_conf  with a cluster creation dry-run";

pcluster create-cluster -n $cluster_name -c $target_conf --dryrun true;


echo " .... did the cluster dry run return succcess? If so: "
echo " "
echo "READY TO CREATE CLUSTER $cluster_name? [yes | no ]"

read ready_to_create;
if [[ "$ready_to_create" != "yes" ]]; then
    return 1;
fi;

echo "Your config file will create a working cluster, creating now:";

pcluster create-cluster	-n $cluster_name -c $target_conf ;

sleep 2;
echo "Now, you wait a little while, 10-15m, for the cloudstack to complete creationg all the bits and bobs needed for daylily to run.  You may wish to run the command 'watch pcluster list-clusters' until the cluster status is COMPLETE.  If it fails, I would suspect quotas first, but you may debug in your cloudstack console to find out what failed.";

echo " ";
sleep 2;
echo "hit CTRL-C to exit the watch command.  AND when complete, run ./bin/daylily-init-headnode you will only need the cluster name and pem path+name<.";

#watch pcluster list-clusters;

echo "if the status is COMPLETE, you are ready to run ./bin/daylily-init-headnode.  If cluster create fails, check your cloudformation stack.";
echo " .... This may take ~15min !";
echo " ";
sleep 5;
python bin/helpers/watch_cluster_status.py;

echo " ";
echo " ";
echo " Next, configuring your head node.";

bin/daylily-init-headnode $pem_file
