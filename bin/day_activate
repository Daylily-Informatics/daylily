#!/usr/bin/env bash
# This script is intended to be sourced, not executed directly.


dayp="$1"
echo "Requesting profile: $DAY_PROFILE"
DP=$DAY_PROJECT

# Attempt to deactivate any existing environment
source bin/day_deactivate &> /dev/null 
echo "Attempting to deactivate existing environments & re-init with --project $DP ."
. dayinit --project $DP &> /dev/null
export DAY_PROFILE=$dayp

echo 
# Check if DAY_ROOT is set
if [[ -z "$DAY_ROOT" ]]; then
    echo "ERROR: DAY_ROOT is not set. Have you executed 'source dayinit'? Use -h for help."
    return 2
fi

# Handle help argument
if [[ "$1" =~ ^(-h|--help|help)$ ]]; then
    echo "Usage: day-activate [profile]"
    echo "This script activates a Daylily analysis profile."
    echo "Valid profiles are located in 'config/day_profiles/'."
    echo "Example: day-activate local"
    return 0
fi

export DAY_PROFILE_DIR="$DAY_ROOT/config/day_profiles/$DAY_PROFILE"
if [[ ! -d "$DAY_PROFILE_DIR" ]]; then
    colr "ERROR: Profile directory: $DAY_PROFILE_DIR does not exist." "$DY_WT0" "$DY_WB0" "$DY_WS1" 1>&2
    echo "Have you run 'day-activate'?"
    return 3
fi

source bin/util/profile_freshness_warn.bash
if [[ "$?" == "3" ]]; then
    echo "ERROR: source bin/util/profile_freshness_warn.bash"
    return 4
fi


# Verify profile exists
profile_info="$DAY_ROOT/config/day_profiles/$1/templates/profile.info"
if [[ -f "$profile_info" ]]; then
    # Extract environment variables from profile.info
    env_val=$(grep 'env_var_val' "$profile_info" | cut -d ':' -f 2)
    if [[ "$env_val" != "$DAY_PROFILE" ]]; then
        echo "ERROR: Profile '$1' does not match the expected environment variable value."
        return 1
    fi
    env_script=$(grep 'env_script' "$profile_info" | cut -d ':' -f 2)
    mgps1val=$(grep 'terminal_abbreviation' "$profile_info" | cut -d ':' -f 2)

    # Source the environment script
    source "$env_script"
    ret_code=$?
    export DYPS1="$mgps1val"
else
    echo "ERROR: Profile '$1' not found."
    return 1
fi

# Check for 'colr' command
if ! command -v colr &> /dev/null; then
    echo "ERROR: 'colr' package is missing. Things will probably work, but not look fabulous."
    sleep 2
fi

# Check for errors during activation
if [[ "$ret_code" != "0" ]]; then
    echo "ERROR: Activation failed with return code $ret_code."
    source bin/util/col_error.bash
    echo ""
    echo "Have you run 'day-build'? If so, try 'bin/day_deactivate reset; source dayinit; day-activate local;'"
    return $ret_code
else
    echo "GREAT SUCCESS!"
    export PS1="$DYPS1$PS1"
    bin/day_run justinit
fi

return 0
